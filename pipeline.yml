---
resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

resources:
  - name: repository
    type: pull-request
    check_every: 24h
    webhook_token: ((formula_evaluator_git_webhook_token))
    icon: github-circle
    source:
      repository: ONSdigital/takeon-validation-formula-evaluator
      access_token: ((git_access_token))

  - name: deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((formula_evaluator_git_webhook_token_merge))
    source:
      uri: ((git_repository))
      branch: dev

  - name: base-python-image
    type: docker-image
    icon: language-python
    source:
      repository: python
      tag: 3.7-slim

  - name: ecr-image-upload
    type: docker-image
    icon: docker
    source:
      repository: ((ecr_repository))
      aws_access_key_id: ((concourse-svc-user.api-key))
      aws_secret_access_key: ((concourse-svc-user.api-secret))

jobs:
  - name: installing-dependencies
    serial: true
    plan:

      - get: repository
        trigger: true

      - get: base-python-image
        params:
          save: true

      - put: ecr-image-upload
        params:
          load_base: base-python-image
          build: repository

  - name: linting-&-tests
    plan:

      - get: repository
        trigger: true
        passed: [installing-dependencies]
        version: every
      - put: repository
        params:
          path: repository
          status: success
      - in_parallel:
          - task: aws-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: ((ecr_repository))
                  aws_access_key_id: ((concourse-svc-user.api-key))
                  aws_secret_access_key: ((concourse-svc-user.api-secret))
              inputs:
                - name: repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd repository
                    PYTHONPATH=$(pwd)/repository python test_harness.py
            on_failure:
              put: repository
              params:
                path: repository
                status: failure
                description: Failing tests are present

# flake8 will be used once team uses it for development
#          - task: flake8
#            config:
#              platform: linux
#              image_resource:
#                type: docker-image
#                source:
#                  repository: ((ecr_repository))
#                  aws_access_key_id: ((concourse-svc-user.api-key))
#                  aws_secret_access_key: ((concourse-svc-user.api-secret))
#              inputs:
#                - name: repository
#              run:
#                path: sh
#                args:
#                  - -exc
#                  - |
#                    flake8 $(pwd)/repository
#            on_failure:
#              put: repository
#              params:
#                path: repository
#                status: failure
#                description: Code standards are not met

  - name: serverless-deploy
    plan:
      - get: deploy-repository
        trigger: true
      - task: serverless-aws
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((ecr_repository))
              aws_access_key_id: ((concourse-svc-user.api-key))
              aws_secret_access_key: ((concourse-svc-user.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((concourse-svc-user.api-key))
            AWS_SECRET_ACCESS_KEY: ((concourse-svc-user.api-secret))
            SLS_DEBUG: 1
          inputs:
            - name: deploy-repository
          run:
            path: deploy-repository/serverless.sh